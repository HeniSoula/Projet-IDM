/**
 * generated by Xtext 2.23.0
 */
package fr.n7.game.impl;

import fr.n7.game.Action;
import fr.n7.game.Choix;
import fr.n7.game.Condition;
import fr.n7.game.Connaissance;
import fr.n7.game.GamePackage;
import fr.n7.game.Objet;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Action</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link fr.n7.game.impl.ActionImpl#getConditionAction <em>Condition Action</em>}</li>
 *   <li>{@link fr.n7.game.impl.ActionImpl#getListeChoix <em>Liste Choix</em>}</li>
 *   <li>{@link fr.n7.game.impl.ActionImpl#getListeConnaissances <em>Liste Connaissances</em>}</li>
 *   <li>{@link fr.n7.game.impl.ActionImpl#getListeObjets <em>Liste Objets</em>}</li>
 *   <li>{@link fr.n7.game.impl.ActionImpl#getAttributionConnaissance <em>Attribution Connaissance</em>}</li>
 *   <li>{@link fr.n7.game.impl.ActionImpl#getAttributionObjet <em>Attribution Objet</em>}</li>
 *   <li>{@link fr.n7.game.impl.ActionImpl#getListeObjetsConsommes <em>Liste Objets Consommes</em>}</li>
 *   <li>{@link fr.n7.game.impl.ActionImpl#getConsommationObjet <em>Consommation Objet</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ActionImpl extends MinimalEObjectImpl.Container implements Action
{
  /**
   * The cached value of the '{@link #getConditionAction() <em>Condition Action</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConditionAction()
   * @generated
   * @ordered
   */
  protected Condition conditionAction;

  /**
   * The cached value of the '{@link #getListeChoix() <em>Liste Choix</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getListeChoix()
   * @generated
   * @ordered
   */
  protected EList<Choix> listeChoix;

  /**
   * The cached value of the '{@link #getListeConnaissances() <em>Liste Connaissances</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getListeConnaissances()
   * @generated
   * @ordered
   */
  protected EList<Connaissance> listeConnaissances;

  /**
   * The cached value of the '{@link #getListeObjets() <em>Liste Objets</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getListeObjets()
   * @generated
   * @ordered
   */
  protected EList<Objet> listeObjets;

  /**
   * The cached value of the '{@link #getAttributionConnaissance() <em>Attribution Connaissance</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAttributionConnaissance()
   * @generated
   * @ordered
   */
  protected Condition attributionConnaissance;

  /**
   * The cached value of the '{@link #getAttributionObjet() <em>Attribution Objet</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAttributionObjet()
   * @generated
   * @ordered
   */
  protected Condition attributionObjet;

  /**
   * The cached value of the '{@link #getListeObjetsConsommes() <em>Liste Objets Consommes</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getListeObjetsConsommes()
   * @generated
   * @ordered
   */
  protected EList<Objet> listeObjetsConsommes;

  /**
   * The cached value of the '{@link #getConsommationObjet() <em>Consommation Objet</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConsommationObjet()
   * @generated
   * @ordered
   */
  protected Condition consommationObjet;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ActionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return GamePackage.Literals.ACTION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Condition getConditionAction()
  {
    return conditionAction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetConditionAction(Condition newConditionAction, NotificationChain msgs)
  {
    Condition oldConditionAction = conditionAction;
    conditionAction = newConditionAction;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GamePackage.ACTION__CONDITION_ACTION, oldConditionAction, newConditionAction);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setConditionAction(Condition newConditionAction)
  {
    if (newConditionAction != conditionAction)
    {
      NotificationChain msgs = null;
      if (conditionAction != null)
        msgs = ((InternalEObject)conditionAction).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GamePackage.ACTION__CONDITION_ACTION, null, msgs);
      if (newConditionAction != null)
        msgs = ((InternalEObject)newConditionAction).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GamePackage.ACTION__CONDITION_ACTION, null, msgs);
      msgs = basicSetConditionAction(newConditionAction, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GamePackage.ACTION__CONDITION_ACTION, newConditionAction, newConditionAction));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Choix> getListeChoix()
  {
    if (listeChoix == null)
    {
      listeChoix = new EObjectContainmentEList<Choix>(Choix.class, this, GamePackage.ACTION__LISTE_CHOIX);
    }
    return listeChoix;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Connaissance> getListeConnaissances()
  {
    if (listeConnaissances == null)
    {
      listeConnaissances = new EObjectContainmentEList<Connaissance>(Connaissance.class, this, GamePackage.ACTION__LISTE_CONNAISSANCES);
    }
    return listeConnaissances;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Objet> getListeObjets()
  {
    if (listeObjets == null)
    {
      listeObjets = new EObjectContainmentEList<Objet>(Objet.class, this, GamePackage.ACTION__LISTE_OBJETS);
    }
    return listeObjets;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Condition getAttributionConnaissance()
  {
    return attributionConnaissance;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetAttributionConnaissance(Condition newAttributionConnaissance, NotificationChain msgs)
  {
    Condition oldAttributionConnaissance = attributionConnaissance;
    attributionConnaissance = newAttributionConnaissance;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GamePackage.ACTION__ATTRIBUTION_CONNAISSANCE, oldAttributionConnaissance, newAttributionConnaissance);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setAttributionConnaissance(Condition newAttributionConnaissance)
  {
    if (newAttributionConnaissance != attributionConnaissance)
    {
      NotificationChain msgs = null;
      if (attributionConnaissance != null)
        msgs = ((InternalEObject)attributionConnaissance).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GamePackage.ACTION__ATTRIBUTION_CONNAISSANCE, null, msgs);
      if (newAttributionConnaissance != null)
        msgs = ((InternalEObject)newAttributionConnaissance).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GamePackage.ACTION__ATTRIBUTION_CONNAISSANCE, null, msgs);
      msgs = basicSetAttributionConnaissance(newAttributionConnaissance, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GamePackage.ACTION__ATTRIBUTION_CONNAISSANCE, newAttributionConnaissance, newAttributionConnaissance));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Condition getAttributionObjet()
  {
    return attributionObjet;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetAttributionObjet(Condition newAttributionObjet, NotificationChain msgs)
  {
    Condition oldAttributionObjet = attributionObjet;
    attributionObjet = newAttributionObjet;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GamePackage.ACTION__ATTRIBUTION_OBJET, oldAttributionObjet, newAttributionObjet);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setAttributionObjet(Condition newAttributionObjet)
  {
    if (newAttributionObjet != attributionObjet)
    {
      NotificationChain msgs = null;
      if (attributionObjet != null)
        msgs = ((InternalEObject)attributionObjet).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GamePackage.ACTION__ATTRIBUTION_OBJET, null, msgs);
      if (newAttributionObjet != null)
        msgs = ((InternalEObject)newAttributionObjet).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GamePackage.ACTION__ATTRIBUTION_OBJET, null, msgs);
      msgs = basicSetAttributionObjet(newAttributionObjet, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GamePackage.ACTION__ATTRIBUTION_OBJET, newAttributionObjet, newAttributionObjet));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Objet> getListeObjetsConsommes()
  {
    if (listeObjetsConsommes == null)
    {
      listeObjetsConsommes = new EObjectContainmentEList<Objet>(Objet.class, this, GamePackage.ACTION__LISTE_OBJETS_CONSOMMES);
    }
    return listeObjetsConsommes;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Condition getConsommationObjet()
  {
    return consommationObjet;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetConsommationObjet(Condition newConsommationObjet, NotificationChain msgs)
  {
    Condition oldConsommationObjet = consommationObjet;
    consommationObjet = newConsommationObjet;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GamePackage.ACTION__CONSOMMATION_OBJET, oldConsommationObjet, newConsommationObjet);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setConsommationObjet(Condition newConsommationObjet)
  {
    if (newConsommationObjet != consommationObjet)
    {
      NotificationChain msgs = null;
      if (consommationObjet != null)
        msgs = ((InternalEObject)consommationObjet).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GamePackage.ACTION__CONSOMMATION_OBJET, null, msgs);
      if (newConsommationObjet != null)
        msgs = ((InternalEObject)newConsommationObjet).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GamePackage.ACTION__CONSOMMATION_OBJET, null, msgs);
      msgs = basicSetConsommationObjet(newConsommationObjet, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GamePackage.ACTION__CONSOMMATION_OBJET, newConsommationObjet, newConsommationObjet));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case GamePackage.ACTION__CONDITION_ACTION:
        return basicSetConditionAction(null, msgs);
      case GamePackage.ACTION__LISTE_CHOIX:
        return ((InternalEList<?>)getListeChoix()).basicRemove(otherEnd, msgs);
      case GamePackage.ACTION__LISTE_CONNAISSANCES:
        return ((InternalEList<?>)getListeConnaissances()).basicRemove(otherEnd, msgs);
      case GamePackage.ACTION__LISTE_OBJETS:
        return ((InternalEList<?>)getListeObjets()).basicRemove(otherEnd, msgs);
      case GamePackage.ACTION__ATTRIBUTION_CONNAISSANCE:
        return basicSetAttributionConnaissance(null, msgs);
      case GamePackage.ACTION__ATTRIBUTION_OBJET:
        return basicSetAttributionObjet(null, msgs);
      case GamePackage.ACTION__LISTE_OBJETS_CONSOMMES:
        return ((InternalEList<?>)getListeObjetsConsommes()).basicRemove(otherEnd, msgs);
      case GamePackage.ACTION__CONSOMMATION_OBJET:
        return basicSetConsommationObjet(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case GamePackage.ACTION__CONDITION_ACTION:
        return getConditionAction();
      case GamePackage.ACTION__LISTE_CHOIX:
        return getListeChoix();
      case GamePackage.ACTION__LISTE_CONNAISSANCES:
        return getListeConnaissances();
      case GamePackage.ACTION__LISTE_OBJETS:
        return getListeObjets();
      case GamePackage.ACTION__ATTRIBUTION_CONNAISSANCE:
        return getAttributionConnaissance();
      case GamePackage.ACTION__ATTRIBUTION_OBJET:
        return getAttributionObjet();
      case GamePackage.ACTION__LISTE_OBJETS_CONSOMMES:
        return getListeObjetsConsommes();
      case GamePackage.ACTION__CONSOMMATION_OBJET:
        return getConsommationObjet();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case GamePackage.ACTION__CONDITION_ACTION:
        setConditionAction((Condition)newValue);
        return;
      case GamePackage.ACTION__LISTE_CHOIX:
        getListeChoix().clear();
        getListeChoix().addAll((Collection<? extends Choix>)newValue);
        return;
      case GamePackage.ACTION__LISTE_CONNAISSANCES:
        getListeConnaissances().clear();
        getListeConnaissances().addAll((Collection<? extends Connaissance>)newValue);
        return;
      case GamePackage.ACTION__LISTE_OBJETS:
        getListeObjets().clear();
        getListeObjets().addAll((Collection<? extends Objet>)newValue);
        return;
      case GamePackage.ACTION__ATTRIBUTION_CONNAISSANCE:
        setAttributionConnaissance((Condition)newValue);
        return;
      case GamePackage.ACTION__ATTRIBUTION_OBJET:
        setAttributionObjet((Condition)newValue);
        return;
      case GamePackage.ACTION__LISTE_OBJETS_CONSOMMES:
        getListeObjetsConsommes().clear();
        getListeObjetsConsommes().addAll((Collection<? extends Objet>)newValue);
        return;
      case GamePackage.ACTION__CONSOMMATION_OBJET:
        setConsommationObjet((Condition)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case GamePackage.ACTION__CONDITION_ACTION:
        setConditionAction((Condition)null);
        return;
      case GamePackage.ACTION__LISTE_CHOIX:
        getListeChoix().clear();
        return;
      case GamePackage.ACTION__LISTE_CONNAISSANCES:
        getListeConnaissances().clear();
        return;
      case GamePackage.ACTION__LISTE_OBJETS:
        getListeObjets().clear();
        return;
      case GamePackage.ACTION__ATTRIBUTION_CONNAISSANCE:
        setAttributionConnaissance((Condition)null);
        return;
      case GamePackage.ACTION__ATTRIBUTION_OBJET:
        setAttributionObjet((Condition)null);
        return;
      case GamePackage.ACTION__LISTE_OBJETS_CONSOMMES:
        getListeObjetsConsommes().clear();
        return;
      case GamePackage.ACTION__CONSOMMATION_OBJET:
        setConsommationObjet((Condition)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case GamePackage.ACTION__CONDITION_ACTION:
        return conditionAction != null;
      case GamePackage.ACTION__LISTE_CHOIX:
        return listeChoix != null && !listeChoix.isEmpty();
      case GamePackage.ACTION__LISTE_CONNAISSANCES:
        return listeConnaissances != null && !listeConnaissances.isEmpty();
      case GamePackage.ACTION__LISTE_OBJETS:
        return listeObjets != null && !listeObjets.isEmpty();
      case GamePackage.ACTION__ATTRIBUTION_CONNAISSANCE:
        return attributionConnaissance != null;
      case GamePackage.ACTION__ATTRIBUTION_OBJET:
        return attributionObjet != null;
      case GamePackage.ACTION__LISTE_OBJETS_CONSOMMES:
        return listeObjetsConsommes != null && !listeObjetsConsommes.isEmpty();
      case GamePackage.ACTION__CONSOMMATION_OBJET:
        return consommationObjet != null;
    }
    return super.eIsSet(featureID);
  }

} //ActionImpl
