/*
 * generated by Xtext 2.23.0
 */
package fr.n7.serializer;

import com.google.inject.Inject;
import fr.n7.game.Chemin;
import fr.n7.game.Choix;
import fr.n7.game.Condition;
import fr.n7.game.Connaissance;
import fr.n7.game.Connaissances;
import fr.n7.game.Explorateur;
import fr.n7.game.Game;
import fr.n7.game.GamePackage;
import fr.n7.game.Interaction;
import fr.n7.game.Lieu;
import fr.n7.game.LieuDebut;
import fr.n7.game.LieuFin;
import fr.n7.game.Objet;
import fr.n7.game.Objets;
import fr.n7.game.Personne;
import fr.n7.game.Personnes;
import fr.n7.game.Sac;
import fr.n7.game.Territoire;
import fr.n7.services.GameGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class GameSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private GameGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == GamePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case GamePackage.ACTION:
				sequence_Action(context, (fr.n7.game.Action) semanticObject); 
				return; 
			case GamePackage.CHEMIN:
				sequence_Chemin(context, (Chemin) semanticObject); 
				return; 
			case GamePackage.CHOIX:
				sequence_Choix(context, (Choix) semanticObject); 
				return; 
			case GamePackage.CONDITION:
				sequence_Condition(context, (Condition) semanticObject); 
				return; 
			case GamePackage.CONNAISSANCE:
				sequence_Connaissance(context, (Connaissance) semanticObject); 
				return; 
			case GamePackage.CONNAISSANCES:
				sequence_Connaissances(context, (Connaissances) semanticObject); 
				return; 
			case GamePackage.EXPLORATEUR:
				sequence_Explorateur(context, (Explorateur) semanticObject); 
				return; 
			case GamePackage.GAME:
				sequence_Game(context, (Game) semanticObject); 
				return; 
			case GamePackage.INTERACTION:
				sequence_Interaction(context, (Interaction) semanticObject); 
				return; 
			case GamePackage.LIEU:
				sequence_Lieu(context, (Lieu) semanticObject); 
				return; 
			case GamePackage.LIEU_DEBUT:
				sequence_LieuDebut(context, (LieuDebut) semanticObject); 
				return; 
			case GamePackage.LIEU_FIN:
				if (rule == grammarAccess.getCheminRule()) {
					sequence_Chemin_LieuFin(context, (LieuFin) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getLieuFinRule()) {
					sequence_LieuFin(context, (LieuFin) semanticObject); 
					return; 
				}
				else break;
			case GamePackage.OBJET:
				sequence_Objet(context, (Objet) semanticObject); 
				return; 
			case GamePackage.OBJETS:
				sequence_Objets(context, (Objets) semanticObject); 
				return; 
			case GamePackage.PERSONNE:
				sequence_Personne(context, (Personne) semanticObject); 
				return; 
			case GamePackage.PERSONNES:
				sequence_Personnes(context, (Personnes) semanticObject); 
				return; 
			case GamePackage.SAC:
				sequence_Sac(context, (Sac) semanticObject); 
				return; 
			case GamePackage.TERRITOIRE:
				sequence_Territoire(context, (Territoire) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Action returns Action
	 *
	 * Constraint:
	 *     (
	 *         conditionAction=Condition? 
	 *         listeChoix+=Choix* 
	 *         listeConnaissances+=Connaissance* 
	 *         listeObjets+=Objet* 
	 *         attributionConnaissance=Condition 
	 *         attributionObjet=Condition? 
	 *         listeObjetsConsommes+=Objet* 
	 *         consommationObjet=Condition?
	 *     )
	 */
	protected void sequence_Action(ISerializationContext context, fr.n7.game.Action semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Chemin returns Chemin
	 *
	 * Constraint:
	 *     (description=STRING conditionDescription=Condition? destination=Lieu)
	 */
	protected void sequence_Chemin(ISerializationContext context, Chemin semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Chemin returns LieuFin
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         (description=STRING conditionDescription=Condition?)? 
	 *         lieufinElements+=Personnes? 
	 *         lieufinElements+=Connaissances? 
	 *         lieufinElements+=Objets? 
	 *         depotObjet=Condition? 
	 *         obligatoire=Condition? 
	 *         visible=Condition? 
	 *         ouvert=Condition? 
	 *         listeConnaissances+=Connaissance* 
	 *         listeObjets+=Objet*
	 *     )
	 */
	protected void sequence_Chemin_LieuFin(ISerializationContext context, LieuFin semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Choix returns Choix
	 *
	 * Constraint:
	 *     (texte=STRING listeActions+=Action+ (choixdebut=STRING conditonChoixDebut=Condition)? (choixfin=STRING conditionChoixFin=Condition)?)
	 */
	protected void sequence_Choix(ISerializationContext context, Choix semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Condition returns Condition
	 *
	 * Constraint:
	 *     (name=ID condition=COND)
	 */
	protected void sequence_Condition(ISerializationContext context, Condition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GamePackage.Literals.CONDITION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GamePackage.Literals.CONDITION__NAME));
			if (transientValues.isValueTransient(semanticObject, GamePackage.Literals.CONDITION__CONDITION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GamePackage.Literals.CONDITION__CONDITION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getConditionAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getConditionAccess().getConditionCONDTerminalRuleCall_2_0(), semanticObject.isCondition());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Connaissance returns Connaissance
	 *
	 * Constraint:
	 *     (name=ID (description=STRING conditionConnaissance=Condition?)?)
	 */
	protected void sequence_Connaissance(ISerializationContext context, Connaissance semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Connaissances returns Connaissances
	 *
	 * Constraint:
	 *     listeConnaissances+=Connaissance+
	 */
	protected void sequence_Connaissances(ISerializationContext context, Connaissances semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Explorateur returns Explorateur
	 *
	 * Constraint:
	 *     (name=ID explorateurElements+=Sac explorateurElements+=Connaissances? explorateurElements+=Lieu?)
	 */
	protected void sequence_Explorateur(ISerializationContext context, Explorateur semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Game returns Game
	 *
	 * Constraint:
	 *     (name=ID gameElements+=gameElement)
	 */
	protected void sequence_Game(ISerializationContext context, Game semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Interaction returns Interaction
	 *
	 * Constraint:
	 *     (name=ID texte=STRING interactionElements+=Choix*)
	 */
	protected void sequence_Interaction(ISerializationContext context, Interaction semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     LieuDebut returns LieuDebut
	 *     Chemin returns LieuDebut
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         (description=STRING conditionDescription=Condition?)? 
	 *         lieudebutElements+=Personnes? 
	 *         lieudebutElements+=Connaissances? 
	 *         lieudebutElements+=Objets? 
	 *         depotObjet=Condition? 
	 *         listeChemins+=Chemin+
	 *     )
	 */
	protected void sequence_LieuDebut(ISerializationContext context, LieuDebut semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     LieuFin returns LieuFin
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         (description=STRING conditionDescription=Condition?)? 
	 *         lieufinElements+=Personnes? 
	 *         lieufinElements+=Connaissances? 
	 *         lieufinElements+=Objets? 
	 *         depotObjet=Condition?
	 *     )
	 */
	protected void sequence_LieuFin(ISerializationContext context, LieuFin semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Lieu returns Lieu
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         (description=STRING conditionDescription=Condition?)? 
	 *         lieuElements+=Personnes? 
	 *         lieuElements+=Connaissances? 
	 *         lieuElements+=Objets? 
	 *         depotObjet=Condition? 
	 *         listeChemins+=Chemin+
	 *     )
	 */
	protected void sequence_Lieu(ISerializationContext context, Lieu semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Objet returns Objet
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         taille=INT 
	 *         quantite=INT 
	 *         conditionTransmission=Condition? 
	 *         conditionConsommation=Condition? 
	 *         (description=STRING conditionDescription=Condition?)? 
	 *         transformable=Condition?
	 *     )
	 */
	protected void sequence_Objet(ISerializationContext context, Objet semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Objets returns Objets
	 *
	 * Constraint:
	 *     listeObjets+=Objet+
	 */
	protected void sequence_Objets(ISerializationContext context, Objets semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Personne returns Personne
	 *
	 * Constraint:
	 *     (name=ID visible=BOOL? obligatoire=BOOL? personneElements+=Interaction)
	 */
	protected void sequence_Personne(ISerializationContext context, Personne semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Personnes returns Personnes
	 *
	 * Constraint:
	 *     listePersonne+=Personne+
	 */
	protected void sequence_Personnes(ISerializationContext context, Personnes semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Sac returns Sac
	 *
	 * Constraint:
	 *     (taille=INT sacElements+=Objet*)
	 */
	protected void sequence_Sac(ISerializationContext context, Sac semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     gameElement returns Territoire
	 *     Territoire returns Territoire
	 *
	 * Constraint:
	 *     (name=ID territoireElements+=Explorateur territoireElements+=LieuDebut territoireElements+=LieuFin+ territoireElements+=Lieu*)
	 */
	protected void sequence_Territoire(ISerializationContext context, Territoire semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
